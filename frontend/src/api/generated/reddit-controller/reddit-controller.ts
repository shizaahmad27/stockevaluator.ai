// @ts-nocheck
/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import { useInfiniteQuery, useQuery } from "@tanstack/vue-query";
import type {
  DataTag,
  InfiniteData,
  QueryClient,
  QueryFunction,
  QueryKey,
  UseInfiniteQueryOptions,
  UseInfiniteQueryReturnType,
  UseQueryOptions,
  UseQueryReturnType,
} from "@tanstack/vue-query";

import { computed, unref } from "vue";
import type { MaybeRef } from "vue";

import type {
  JsonNode,
  RedditComment,
  RedditPost,
  SearchTickersParams,
  Ticker,
} from ".././model";

import { customInstanceFn } from "../../mutator/custom-instance";

export const getTrendingTickers = (signal?: AbortSignal) => {
  return customInstanceFn<Ticker[]>({
    url: `/api/reddit/trending`,
    method: "GET",
    signal,
  });
};

export const getGetTrendingTickersQueryKey = () => {
  return ["api", "reddit", "trending"] as const;
};

export const getGetTrendingTickersInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getTrendingTickers>>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof getTrendingTickers>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getGetTrendingTickersQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getTrendingTickers>>
  > = ({ signal }) => getTrendingTickers(signal);

  return {
    queryKey,
    queryFn,
    staleTime: 10000,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getTrendingTickers>>,
    TError,
    TData
  >;
};

export type GetTrendingTickersInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTrendingTickers>>
>;
export type GetTrendingTickersInfiniteQueryError = unknown;

export function useGetTrendingTickersInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getTrendingTickers>>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTrendingTickers>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetTrendingTickersInfiniteQueryOptions(options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}

export const getGetTrendingTickersQueryOptions = <
  TData = Awaited<ReturnType<typeof getTrendingTickers>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getTrendingTickers>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getGetTrendingTickersQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getTrendingTickers>>
  > = ({ signal }) => getTrendingTickers(signal);

  return {
    queryKey,
    queryFn,
    staleTime: 10000,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getTrendingTickers>>,
    TError,
    TData
  >;
};

export type GetTrendingTickersQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTrendingTickers>>
>;
export type GetTrendingTickersQueryError = unknown;

export function useGetTrendingTickers<
  TData = Awaited<ReturnType<typeof getTrendingTickers>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTrendingTickers>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetTrendingTickersQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryReturnType<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}

export const getTicker = (symbol: MaybeRef<string>, signal?: AbortSignal) => {
  symbol = unref(symbol);

  return customInstanceFn<Ticker>({
    url: `/api/reddit/ticker/${symbol}`,
    method: "GET",
    signal,
  });
};

export const getGetTickerQueryKey = (symbol: MaybeRef<string>) => {
  return ["api", "reddit", "ticker", symbol] as const;
};

export const getGetTickerInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getTicker>>>,
  TError = unknown,
>(
  symbol: MaybeRef<string>,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTicker>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getGetTickerQueryKey(symbol);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getTicker>>> = ({
    signal,
  }) => getTicker(symbol, signal);

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(symbol)),
    staleTime: 10000,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getTicker>>,
    TError,
    TData
  >;
};

export type GetTickerInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTicker>>
>;
export type GetTickerInfiniteQueryError = unknown;

export function useGetTickerInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getTicker>>>,
  TError = unknown,
>(
  symbol: MaybeRef<string>,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTicker>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetTickerInfiniteQueryOptions(symbol, options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}

export const getGetTickerQueryOptions = <
  TData = Awaited<ReturnType<typeof getTicker>>,
  TError = unknown,
>(
  symbol: MaybeRef<string>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTicker>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getGetTickerQueryKey(symbol);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getTicker>>> = ({
    signal,
  }) => getTicker(symbol, signal);

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(symbol)),
    staleTime: 10000,
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof getTicker>>, TError, TData>;
};

export type GetTickerQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTicker>>
>;
export type GetTickerQueryError = unknown;

export function useGetTicker<
  TData = Awaited<ReturnType<typeof getTicker>>,
  TError = unknown,
>(
  symbol: MaybeRef<string>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTicker>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetTickerQueryOptions(symbol, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryReturnType<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}

export const searchTickers = (
  params: MaybeRef<SearchTickersParams>,
  signal?: AbortSignal,
) => {
  params = unref(params);

  return customInstanceFn<Ticker[]>({
    url: `/api/reddit/search`,
    method: "GET",
    params: unref(params),
    signal,
  });
};

export const getSearchTickersQueryKey = (
  params: MaybeRef<SearchTickersParams>,
) => {
  return ["api", "reddit", "search", ...(params ? [params] : [])] as const;
};

export const getSearchTickersInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof searchTickers>>,
    SearchTickersParams["page"]
  >,
  TError = unknown,
>(
  params: MaybeRef<SearchTickersParams>,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof searchTickers>>,
        TError,
        TData,
        Awaited<ReturnType<typeof searchTickers>>,
        QueryKey,
        SearchTickersParams["page"]
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getSearchTickersQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof searchTickers>>,
    QueryKey,
    SearchTickersParams["page"]
  > = ({ signal, pageParam }) =>
    searchTickers(
      { ...unref(params), page: pageParam || unref(params)?.["page"] },
      signal,
    );

  return {
    queryKey,
    queryFn,
    staleTime: 10000,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof searchTickers>>,
    TError,
    TData,
    Awaited<ReturnType<typeof searchTickers>>,
    QueryKey,
    SearchTickersParams["page"]
  >;
};

export type SearchTickersInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof searchTickers>>
>;
export type SearchTickersInfiniteQueryError = unknown;

export function useSearchTickersInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof searchTickers>>,
    SearchTickersParams["page"]
  >,
  TError = unknown,
>(
  params: MaybeRef<SearchTickersParams>,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof searchTickers>>,
        TError,
        TData,
        Awaited<ReturnType<typeof searchTickers>>,
        QueryKey,
        SearchTickersParams["page"]
      >
    >;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getSearchTickersInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}

export const getSearchTickersQueryOptions = <
  TData = Awaited<ReturnType<typeof searchTickers>>,
  TError = unknown,
>(
  params: MaybeRef<SearchTickersParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof searchTickers>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getSearchTickersQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof searchTickers>>> = ({
    signal,
  }) => searchTickers(params, signal);

  return {
    queryKey,
    queryFn,
    staleTime: 10000,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof searchTickers>>,
    TError,
    TData
  >;
};

export type SearchTickersQueryResult = NonNullable<
  Awaited<ReturnType<typeof searchTickers>>
>;
export type SearchTickersQueryError = unknown;

export function useSearchTickers<
  TData = Awaited<ReturnType<typeof searchTickers>>,
  TError = unknown,
>(
  params: MaybeRef<SearchTickersParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof searchTickers>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getSearchTickersQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryReturnType<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}

export const searchByTicker = (
  ticker: MaybeRef<string>,
  signal?: AbortSignal,
) => {
  ticker = unref(ticker);

  return customInstanceFn<JsonNode[]>({
    url: `/api/reddit/search/${ticker}`,
    method: "GET",
    signal,
  });
};

export const getSearchByTickerQueryKey = (ticker: MaybeRef<string>) => {
  return ["api", "reddit", "search", ticker] as const;
};

export const getSearchByTickerInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof searchByTicker>>>,
  TError = unknown,
>(
  ticker: MaybeRef<string>,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof searchByTicker>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getSearchByTickerQueryKey(ticker);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof searchByTicker>>> = ({
    signal,
  }) => searchByTicker(ticker, signal);

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(ticker)),
    staleTime: 10000,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof searchByTicker>>,
    TError,
    TData
  >;
};

export type SearchByTickerInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof searchByTicker>>
>;
export type SearchByTickerInfiniteQueryError = unknown;

export function useSearchByTickerInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof searchByTicker>>>,
  TError = unknown,
>(
  ticker: MaybeRef<string>,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof searchByTicker>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getSearchByTickerInfiniteQueryOptions(ticker, options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}

export const getSearchByTickerQueryOptions = <
  TData = Awaited<ReturnType<typeof searchByTicker>>,
  TError = unknown,
>(
  ticker: MaybeRef<string>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof searchByTicker>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getSearchByTickerQueryKey(ticker);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof searchByTicker>>> = ({
    signal,
  }) => searchByTicker(ticker, signal);

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(ticker)),
    staleTime: 10000,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof searchByTicker>>,
    TError,
    TData
  >;
};

export type SearchByTickerQueryResult = NonNullable<
  Awaited<ReturnType<typeof searchByTicker>>
>;
export type SearchByTickerQueryError = unknown;

export function useSearchByTicker<
  TData = Awaited<ReturnType<typeof searchByTicker>>,
  TError = unknown,
>(
  ticker: MaybeRef<string>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof searchByTicker>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getSearchByTickerQueryOptions(ticker, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryReturnType<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}

export const getRecentPosts = (signal?: AbortSignal) => {
  return customInstanceFn<RedditPost[]>({
    url: `/api/reddit/posts`,
    method: "GET",
    signal,
  });
};

export const getGetRecentPostsQueryKey = () => {
  return ["api", "reddit", "posts"] as const;
};

export const getGetRecentPostsInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getRecentPosts>>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof getRecentPosts>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getGetRecentPostsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getRecentPosts>>> = ({
    signal,
  }) => getRecentPosts(signal);

  return {
    queryKey,
    queryFn,
    staleTime: 10000,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getRecentPosts>>,
    TError,
    TData
  >;
};

export type GetRecentPostsInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getRecentPosts>>
>;
export type GetRecentPostsInfiniteQueryError = unknown;

export function useGetRecentPostsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getRecentPosts>>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getRecentPosts>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetRecentPostsInfiniteQueryOptions(options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}

export const getGetRecentPostsQueryOptions = <
  TData = Awaited<ReturnType<typeof getRecentPosts>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getRecentPosts>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getGetRecentPostsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getRecentPosts>>> = ({
    signal,
  }) => getRecentPosts(signal);

  return {
    queryKey,
    queryFn,
    staleTime: 10000,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getRecentPosts>>,
    TError,
    TData
  >;
};

export type GetRecentPostsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getRecentPosts>>
>;
export type GetRecentPostsQueryError = unknown;

export function useGetRecentPosts<
  TData = Awaited<ReturnType<typeof getRecentPosts>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getRecentPosts>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetRecentPostsQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryReturnType<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}

export const getPostsByTicker = (
  ticker: MaybeRef<string>,
  signal?: AbortSignal,
) => {
  ticker = unref(ticker);

  return customInstanceFn<RedditPost[]>({
    url: `/api/reddit/posts/${ticker}`,
    method: "GET",
    signal,
  });
};

export const getGetPostsByTickerQueryKey = (ticker: MaybeRef<string>) => {
  return ["api", "reddit", "posts", ticker] as const;
};

export const getGetPostsByTickerInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getPostsByTicker>>>,
  TError = unknown,
>(
  ticker: MaybeRef<string>,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getPostsByTicker>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getGetPostsByTickerQueryKey(ticker);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getPostsByTicker>>
  > = ({ signal }) => getPostsByTicker(ticker, signal);

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(ticker)),
    staleTime: 10000,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getPostsByTicker>>,
    TError,
    TData
  >;
};

export type GetPostsByTickerInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPostsByTicker>>
>;
export type GetPostsByTickerInfiniteQueryError = unknown;

export function useGetPostsByTickerInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getPostsByTicker>>>,
  TError = unknown,
>(
  ticker: MaybeRef<string>,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getPostsByTicker>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetPostsByTickerInfiniteQueryOptions(ticker, options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}

export const getGetPostsByTickerQueryOptions = <
  TData = Awaited<ReturnType<typeof getPostsByTicker>>,
  TError = unknown,
>(
  ticker: MaybeRef<string>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPostsByTicker>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getGetPostsByTickerQueryKey(ticker);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getPostsByTicker>>
  > = ({ signal }) => getPostsByTicker(ticker, signal);

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(ticker)),
    staleTime: 10000,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getPostsByTicker>>,
    TError,
    TData
  >;
};

export type GetPostsByTickerQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPostsByTicker>>
>;
export type GetPostsByTickerQueryError = unknown;

export function useGetPostsByTicker<
  TData = Awaited<ReturnType<typeof getPostsByTicker>>,
  TError = unknown,
>(
  ticker: MaybeRef<string>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPostsByTicker>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetPostsByTickerQueryOptions(ticker, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryReturnType<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}

export const getCommentsByPost = (
  postId: MaybeRef<string>,
  signal?: AbortSignal,
) => {
  postId = unref(postId);

  return customInstanceFn<RedditComment[]>({
    url: `/api/reddit/posts/${postId}/comments`,
    method: "GET",
    signal,
  });
};

export const getGetCommentsByPostQueryKey = (postId: MaybeRef<string>) => {
  return ["api", "reddit", "posts", postId, "comments"] as const;
};

export const getGetCommentsByPostInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getCommentsByPost>>>,
  TError = unknown,
>(
  postId: MaybeRef<string>,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getCommentsByPost>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getGetCommentsByPostQueryKey(postId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getCommentsByPost>>
  > = ({ signal }) => getCommentsByPost(postId, signal);

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(postId)),
    staleTime: 10000,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getCommentsByPost>>,
    TError,
    TData
  >;
};

export type GetCommentsByPostInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCommentsByPost>>
>;
export type GetCommentsByPostInfiniteQueryError = unknown;

export function useGetCommentsByPostInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getCommentsByPost>>>,
  TError = unknown,
>(
  postId: MaybeRef<string>,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getCommentsByPost>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetCommentsByPostInfiniteQueryOptions(
    postId,
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}

export const getGetCommentsByPostQueryOptions = <
  TData = Awaited<ReturnType<typeof getCommentsByPost>>,
  TError = unknown,
>(
  postId: MaybeRef<string>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCommentsByPost>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getGetCommentsByPostQueryKey(postId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getCommentsByPost>>
  > = ({ signal }) => getCommentsByPost(postId, signal);

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(postId)),
    staleTime: 10000,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getCommentsByPost>>,
    TError,
    TData
  >;
};

export type GetCommentsByPostQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCommentsByPost>>
>;
export type GetCommentsByPostQueryError = unknown;

export function useGetCommentsByPost<
  TData = Awaited<ReturnType<typeof getCommentsByPost>>,
  TError = unknown,
>(
  postId: MaybeRef<string>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCommentsByPost>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetCommentsByPostQueryOptions(postId, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryReturnType<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}

export const getHotPosts = (signal?: AbortSignal) => {
  return customInstanceFn<JsonNode[]>({
    url: `/api/reddit/hot`,
    method: "GET",
    signal,
  });
};

export const getGetHotPostsQueryKey = () => {
  return ["api", "reddit", "hot"] as const;
};

export const getGetHotPostsInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getHotPosts>>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof getHotPosts>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getGetHotPostsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getHotPosts>>> = ({
    signal,
  }) => getHotPosts(signal);

  return {
    queryKey,
    queryFn,
    staleTime: 10000,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getHotPosts>>,
    TError,
    TData
  >;
};

export type GetHotPostsInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getHotPosts>>
>;
export type GetHotPostsInfiniteQueryError = unknown;

export function useGetHotPostsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getHotPosts>>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getHotPosts>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetHotPostsInfiniteQueryOptions(options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}

export const getGetHotPostsQueryOptions = <
  TData = Awaited<ReturnType<typeof getHotPosts>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getHotPosts>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getGetHotPostsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getHotPosts>>> = ({
    signal,
  }) => getHotPosts(signal);

  return {
    queryKey,
    queryFn,
    staleTime: 10000,
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof getHotPosts>>, TError, TData>;
};

export type GetHotPostsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getHotPosts>>
>;
export type GetHotPostsQueryError = unknown;

export function useGetHotPosts<
  TData = Awaited<ReturnType<typeof getHotPosts>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getHotPosts>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetHotPostsQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryReturnType<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}

export const getCommentsByTicker = (
  ticker: MaybeRef<string>,
  signal?: AbortSignal,
) => {
  ticker = unref(ticker);

  return customInstanceFn<RedditComment[]>({
    url: `/api/reddit/comments/${ticker}`,
    method: "GET",
    signal,
  });
};

export const getGetCommentsByTickerQueryKey = (ticker: MaybeRef<string>) => {
  return ["api", "reddit", "comments", ticker] as const;
};

export const getGetCommentsByTickerInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getCommentsByTicker>>>,
  TError = unknown,
>(
  ticker: MaybeRef<string>,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getCommentsByTicker>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getGetCommentsByTickerQueryKey(ticker);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getCommentsByTicker>>
  > = ({ signal }) => getCommentsByTicker(ticker, signal);

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(ticker)),
    staleTime: 10000,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getCommentsByTicker>>,
    TError,
    TData
  >;
};

export type GetCommentsByTickerInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCommentsByTicker>>
>;
export type GetCommentsByTickerInfiniteQueryError = unknown;

export function useGetCommentsByTickerInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getCommentsByTicker>>>,
  TError = unknown,
>(
  ticker: MaybeRef<string>,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getCommentsByTicker>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetCommentsByTickerInfiniteQueryOptions(
    ticker,
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}

export const getGetCommentsByTickerQueryOptions = <
  TData = Awaited<ReturnType<typeof getCommentsByTicker>>,
  TError = unknown,
>(
  ticker: MaybeRef<string>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCommentsByTicker>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getGetCommentsByTickerQueryKey(ticker);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getCommentsByTicker>>
  > = ({ signal }) => getCommentsByTicker(ticker, signal);

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(ticker)),
    staleTime: 10000,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getCommentsByTicker>>,
    TError,
    TData
  >;
};

export type GetCommentsByTickerQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCommentsByTicker>>
>;
export type GetCommentsByTickerQueryError = unknown;

export function useGetCommentsByTicker<
  TData = Awaited<ReturnType<typeof getCommentsByTicker>>,
  TError = unknown,
>(
  ticker: MaybeRef<string>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCommentsByTicker>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetCommentsByTickerQueryOptions(ticker, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryReturnType<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}
