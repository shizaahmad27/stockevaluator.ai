/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import { useInfiniteQuery, useMutation, useQuery } from "@tanstack/vue-query";
import type {
  DataTag,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UseInfiniteQueryOptions,
  UseInfiniteQueryReturnType,
  UseMutationOptions,
  UseMutationReturnType,
  UseQueryOptions,
  UseQueryReturnType,
} from "@tanstack/vue-query";

import { unref } from "vue";
import type { MaybeRef } from "vue";

import type { CreateUser, UserLocationRequest, UserResponse } from ".././model";

import { customInstanceFn } from "../../mutator/custom-instance";

/**
 * Updates an existing user's information
 * @summary Update user
 */
export const updateUser = (
  userId: MaybeRef<string>,
  createUser: MaybeRef<CreateUser>,
) => {
  userId = unref(userId);
  createUser = unref(createUser);

  return customInstanceFn<UserResponse>({
    url: `/api/users/${userId}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: createUser,
  });
};

export const getUpdateUserMutationOptions = <
  TError = UserResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateUser>>,
    TError,
    { userId: string; data: CreateUser },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateUser>>,
  TError,
  { userId: string; data: CreateUser },
  TContext
> => {
  const mutationKey = ["updateUser"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateUser>>,
    { userId: string; data: CreateUser }
  > = (props) => {
    const { userId, data } = props ?? {};

    return updateUser(userId, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateUserMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateUser>>
>;
export type UpdateUserMutationBody = CreateUser;
export type UpdateUserMutationError = UserResponse;

/**
 * @summary Update user
 */
export const useUpdateUser = <TError = UserResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateUser>>,
      TError,
      { userId: string; data: CreateUser },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationReturnType<
  Awaited<ReturnType<typeof updateUser>>,
  TError,
  { userId: string; data: CreateUser },
  TContext
> => {
  const mutationOptions = getUpdateUserMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Deletes a user from the system
 * @summary Delete user
 */
export const deleteUser = (userId: MaybeRef<string>) => {
  userId = unref(userId);

  return customInstanceFn<void>({
    url: `/api/users/${userId}`,
    method: "DELETE",
  });
};

export const getDeleteUserMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteUser>>,
    TError,
    { userId: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteUser>>,
  TError,
  { userId: string },
  TContext
> => {
  const mutationKey = ["deleteUser"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteUser>>,
    { userId: string }
  > = (props) => {
    const { userId } = props ?? {};

    return deleteUser(userId);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteUserMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteUser>>
>;

export type DeleteUserMutationError = void;

/**
 * @summary Delete user
 */
export const useDeleteUser = <TError = void, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteUser>>,
      TError,
      { userId: string },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationReturnType<
  Awaited<ReturnType<typeof deleteUser>>,
  TError,
  { userId: string },
  TContext
> => {
  const mutationOptions = getDeleteUserMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Updates the current user's location coordinates if location sharing is enabled
 * @summary Update user location
 */
export const updateCurrentUserLocation = (
  userLocationRequest: MaybeRef<UserLocationRequest>,
) => {
  userLocationRequest = unref(userLocationRequest);

  return customInstanceFn<UserResponse>({
    url: `/api/users/location`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: userLocationRequest,
  });
};

export const getUpdateCurrentUserLocationMutationOptions = <
  TError = UserResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateCurrentUserLocation>>,
    TError,
    { data: UserLocationRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateCurrentUserLocation>>,
  TError,
  { data: UserLocationRequest },
  TContext
> => {
  const mutationKey = ["updateCurrentUserLocation"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateCurrentUserLocation>>,
    { data: UserLocationRequest }
  > = (props) => {
    const { data } = props ?? {};

    return updateCurrentUserLocation(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateCurrentUserLocationMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateCurrentUserLocation>>
>;
export type UpdateCurrentUserLocationMutationBody = UserLocationRequest;
export type UpdateCurrentUserLocationMutationError = UserResponse;

/**
 * @summary Update user location
 */
export const useUpdateCurrentUserLocation = <
  TError = UserResponse,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateCurrentUserLocation>>,
      TError,
      { data: UserLocationRequest },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationReturnType<
  Awaited<ReturnType<typeof updateCurrentUserLocation>>,
  TError,
  { data: UserLocationRequest },
  TContext
> => {
  const mutationOptions = getUpdateCurrentUserLocationMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Retrieves a list of all users in the system
 * @summary Get all users
 */
export const getAllUsers = (signal?: AbortSignal) => {
  return customInstanceFn<UserResponse[]>({
    url: `/api/users`,
    method: "GET",
    signal,
  });
};

export const getGetAllUsersQueryKey = () => {
  return ["api", "users"] as const;
};

export const getGetAllUsersInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getAllUsers>>>,
  TError = UserResponse[],
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof getAllUsers>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getGetAllUsersQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllUsers>>> = ({
    signal,
  }) => getAllUsers(signal);

  return {
    queryKey,
    queryFn,
    staleTime: 10000,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getAllUsers>>,
    TError,
    TData
  >;
};

export type GetAllUsersInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAllUsers>>
>;
export type GetAllUsersInfiniteQueryError = UserResponse[];

/**
 * @summary Get all users
 */

export function useGetAllUsersInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getAllUsers>>>,
  TError = UserResponse[],
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getAllUsers>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetAllUsersInfiniteQueryOptions(options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}

export const getGetAllUsersQueryOptions = <
  TData = Awaited<ReturnType<typeof getAllUsers>>,
  TError = UserResponse[],
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getAllUsers>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getGetAllUsersQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllUsers>>> = ({
    signal,
  }) => getAllUsers(signal);

  return {
    queryKey,
    queryFn,
    staleTime: 10000,
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof getAllUsers>>, TError, TData>;
};

export type GetAllUsersQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAllUsers>>
>;
export type GetAllUsersQueryError = UserResponse[];

/**
 * @summary Get all users
 */

export function useGetAllUsers<
  TData = Awaited<ReturnType<typeof getAllUsers>>,
  TError = UserResponse[],
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAllUsers>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetAllUsersQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryReturnType<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}
